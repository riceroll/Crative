import { colors } from './globalConfigs';

// Define base dimensions used in calculations
export const sizeLarge = 40;
export const sizeMedium = 24;
export const sizeSmall = 5;
export const gap = 1.5;
export const thickness = 1.5;

// Define specific board types based on how they are constructed/used
// Keys should match the 'type' string you'll use in faceLayouts
// Add dimensions and price for each type
export const boardTypes = {
    // Naming convention example: 'dimAxDimB' (assuming thickness is standard)
    // Adjust names and properties based on your actual board generation logic
    'board_40x40': { width: sizeLarge, height: sizeLarge, thickness: thickness, price: 50.00 ,
        defaultColor: 'grey',
        highlightColor: colors[0]
    },
    'board_40x24': { width: sizeLarge, height: sizeMedium, thickness: thickness, price: 38.0, 
        defaultColor: 'grey',
        highlightColor: colors[1]
    },
    'board_40x5': { width: sizeLarge, height: sizeSmall, thickness: thickness, price: 20.00, 
        defaultColor: 'grey',
        highlightColor: colors[2]
     },
    'board_24x24': { width: sizeMedium, height: sizeMedium, thickness: thickness, price: 22.00,
        defaultColor: 'grey',
        highlightColor: colors[3]
     },
    'board_24x5': { width: sizeMedium, height: sizeSmall, thickness: thickness, price: 12.00,
        defaultColor: 'grey',
        highlightColor: colors[4]
     },
    'board_5x5': { width: sizeSmall, height: sizeSmall, thickness: thickness, price: 5.50,
        defaultColor: 'grey',
        highlightColor: colors[5]
     },
    // Add entries for all possible board sizes/types generated by your logic
};

export const cubePrice = 1.20;

// Helper function to get board price (returns 0 if type not found)
export function getBoardPrice(boardType) {
    return boardTypes[boardType]?.price || 0;
}

// Helper function to get board dimensions (returns null if type not found)
export function getBoardDimensions(boardType) {
    const typeInfo = boardTypes[boardType];
    if (!typeInfo) return null;
    return { width: typeInfo.width, height: typeInfo.height, thickness: typeInfo.thickness };
}
